class Bird:
    name = 'Unknown'
    distance = 0
    speed = 100

    def __init__(self, name, speed):
        self.name = name
        self.speed = speed

    def call(self):
        print('My name is ' + self.name)

    def run(self, increment = False):
        if not increment:
            increment = self.speed
        self.distance += increment
    
    def __gt__(self, value):
        return self.speed > value.speed

    def __lt__(self, value):
        return self.speed < value.speed

    def __eq__(self, value):
        return self.speed == value.speed

owl = Bird('Owl', 150)
owl.call()
owl.run(100)
owl.run(100)
print(owl.distance)

eagle = Bird('Eagle', 400)
eagle.call()
eagle.run()
print(eagle.distance)

#В упражнении мы потренируемся в создании объектно-ориентированной среды и создадим приложение, проводящее лингвистический анализ. 
#Следуйте алгоритму и выполняйте действия последовательно, чтобы получить полноценный класс:
#1. Создайте класс Word. (Вспомните, какое зарезервированное слово используется для создания класса).
#2. Добавьте свойства text (класс будет хранить слово) и part (часть речи, которой является слово. Например, существительное, прилагательное и т.п.). 
#       Для добавления свойств воспользуйтесь методом __init__.
#3. Создайте экземпляр класса Word, передав в качестве параметров любое слово и указав его часть речи.
#4. Создайте класс Sentence. (по аналогии с п. 1).
#5. Добавьте свойство content. (по аналогии с п. 2).
#       Пояснение к дальнейшему коду: content будет хранить список целых чисел, например [0, 1]. 
#       Эти номера необходимы для выбора слов из заранее созданного массива, чтобы сформировать предложение.
#       Пример массива:
#       words = [["собака", "сущ"],
#           ["ела", "глагол"],
#           ["колбасу", "сущ"],
#           ["вечером", "наречие"]]
#       Если content == [0, 2], получим предложение вида «Собака колбасу».
#6. Создайте из массива (можете взять приведённый выше или придумать свой) список, каждый элемент которого является экземпляром класса Word. 
#       Примечание: список list (назовём его words) — отдельная переменная, не относящаяся к классам Word и Sentence.
#7. Добавьте в класс Sentence метод show, составляющий предложение. 
#       Метод должен перебирать числа из свойства content и подставлять соответствующие слова, которые хранятся в свойстве text экземпляров класса Word. 
#       Данные извлекаем из списка words, который получили на прошлом шаге. 
#       При соединении слов в предложение не забудьте добавить пробел между словами.
#8. Добавьте в класс Sentence метод show_parts, отображающий, какие части речи входят в предложение. 
#       По аналогии с п. 7 перебирайте в цикле числа из свойства content и сохраняйте результат в отдельный список. 
#       Учтите, что части речи могут повторяться, но список не должен содержать дубликаты.

import Lib.Word as wd
import Lib.Sentence as st

if __name__ == '__main__':

    wd1 = wd.Word('собака', 'существительное')
    wd2 = wd.Word('ела', 'глагол')
    wd3 = wd.Word('колбасу', 'существительное')
    wd4 = wd.Word('вечером', 'наречие')
    wd5 = wd.Word('голодная', 'прилагательное')

    words = [wd1, wd2, wd3, wd4, wd5]

    args = (4, 0, 1, 3, 2)
    st1 = st.Sentence(*args)

    stse = st1.show(words)
    print(stse)

    stse = st1.show_parts(words)
    print(stse)
